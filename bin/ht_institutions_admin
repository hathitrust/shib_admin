#!/usr/bin/env ruby

## Bundler binstub boilerplate
require "pathname"
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile",
  Pathname.new(__FILE__).realpath)

require "rubygems"
require "bundler/setup"
##

require 'optparse'
require 'sequel'
require_relative '../lib/metadata.rb'
require 'io/console'

def main

  # get args
  verbose = false
  OptionParser.new do |opts|
    opts.banner = <<~usage

  Usage: #{$0} [ entityID_substring ]

  Create or edit the ht_institutions table entry for specified entityID. Entry
  only be edited by this tool if it is not yet enabled or does not yet exist.

  There must be at most one matching entityID in the InCommon metadata.

  If no entityID matches, you can manually enter the information. This is useful
  for entities that are not in the InCommon metadata.

  usage

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

  end.parse!

  q = ARGV.shift

  inst = HTInstitution.new(q)
  inst.edit if yorn("Edit?", default: false)
end

def yorn(prompt, default: false)
  if(default)
    print "#{prompt} [Y/n]: "
  else
    print "#{prompt} [y/N]: "
  end

  ret = default

  while(true)
    answer = gets
    answer.chomp!

    if(answer.empty?)
      break
    elsif(answer.match(/^y(es)?$/i))
      ret = true
      break
    elsif(answer.match(/^n(o)?$/i))
      ret = false
      break
    end

    print "answer 'yes' or 'no': "
  end

  ret
end

def get_string(prompt, default: )
  if (default==nil)
    print "#{prompt} [NULL]: "
  else
    print "#{prompt} [#{default}]: "
  end
  answer = gets
  answer.chomp!
  answer.empty? and return default
  (answer == "NULL") and answer = nil
  answer
end

def pp(hash)
  hash.each do |k,v|
    if (v==nil) 
      v = "NULL"
    end
    puts sprintf("%20s : %s",k,v)
  end
end

def db_connect
  Sequel.mysql2('ht',user:ENV['MYSQL_USER'],host:ENV['MYSQL_HOST'],port:ENV['MYSQL_PORT'],password:ENV['MYSQL_PASS'])
end


class HTInstitution
  public

  def initialize(db=db_connect,eid_substring)
    @db = db_connect
    @entity_info = {}
    @current = find(eid_substring)
  end

  def edit
    puts "Editing settings for #{current[:inst_id]}."
    puts "Enter changes as desired, press Enter without typing to accept default/current values."

    current.keys.each do |k|
      v = current[k]
      # no edit allowed
      if(no_edit.include?(k))
        puts "#{k}: #{v} (cannot edit)"
      # true/false edit
      elsif(v == true or v == false)
        current[k] = yorn(k,default: v)
      # string edit
      else
        current[k] = get_string(k,default: v)
      end
    end

    pp current
    ask_commit
  end

  private

  def find(eid_substring)
    find_eid(eid_substring)

    if (db_inst= find_in_database(eid || eid_substring))
      puts "Existing entry found."
      pp db_inst
      @entry_exists = true
      db_inst
    else
      @entry_exists = false
      default_values(eid || eid_substring)
    end
  end

  def no_edit
    return @no_edit if @no_edit

    @no_edit = [:sdrinst,:entityID,:authtype,:orph_agree]
    if (entry_exists)
      # don't change primary keys
      @no_edit.push(:inst_id)
    else
      # don't ask twice
      @no_edit.push(:domain)
    end
  end

  def ask_commit
    yorn("Commit to database?", default: !entry_exists) && upsert
  end

  def upsert
    if (entry_exists)
      inst_id = current.delete(:inst_id)
      eid = current.delete(:entityID)
      qq = db[:ht_institutions].where(inst_id: inst_id, entityID: eid)
      if(qq.count != 1)
        puts "ERROR UPDATING TABLE: #{qq.count} rows found to update. Aborting."
      end
      result = db[:ht_institutions].where(inst_id: inst_id, entityID: eid).update(current)
      puts "#{result} row updated"
    else
      db[:ht_institutions].insert(current)
    end
  end

  def find_eid(eid_substring)
    metadata = ShibMetadata.new
    eds = metadata.entity_descriptors(eid_substring)
    # no match
    if eds.size > 1
      puts "#{eds.size} matches. Try using shib_info to find an entityID substring with exactly one match."
      exit
    elsif eds.size == 0
      puts "No match in metadata. Searching the database for a match"
    else
      @ed = eds[0]
      @eid = ed.get_attribute("entityID")
      @name = metadata.entity_info(@eid)[:name]
      puts "EntityID: #{eid}"
    end
  end

  def find_in_database(eid,db=db_connect)
    result = db[:ht_institutions].where(entityID:eid).all
    if (result.size > 1)
      puts "More than 1 db entry found for entityID \"#{eid}\". Aborting."
      exit 0
    else
      result[0]
    end
  end


  def default_values(eid)
    domain = "EXAMPLE.edu"
    domain_base = "EXAMPLE"
    /\b(?<base>[a-z\-]+)\.(?<ext>edu|gov|com|org|net|ac\.uk)/ =~ eid
    if(base and ext)
      domain_base = base
      domain = "#{base}.#{ext}"
    end

    puts "Looks like this is a new institution. Please confirm I've got the domain right."
    domain = get_string("Domain",default: domain)
    domain_base = get_string("Domain Base (domain w/o tld)",default: domain_base)

    # default values
    current = {
      sdrinst: domain_base,
      inst_id: domain_base,
      mapto_inst_id: domain_base,
      grin_instance: nil,
      name: name,
      template: "https://___HOST___/Shibboleth.sso/Login?entityID=#{eid}&target=___TARGET___",
      authtype: "shibboleth",
      domain: domain,
      us: true,
      enabled: false,
      orph_agree: false,
      entityID: eid,
      allowed_affiliations: "^(alum|member|faculty|staff|student)@#{domain}",
      emergency_status: nil,
      emergency_contact: nil
    }
  end

  attr_reader :db, :ed, :current, :entry_exists, :eid, :name
end

main if caller
